// Code generated by MockGen. DO NOT EDIT.
// Source: query_builder/builder.go
//
// Generated by this command:
//
//	mockgen -source=query_builder/builder.go -destination=query_builder/mock_strategy.go -package=builder
//

// Package builder is a generated GoMock package.
package builder

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueryListStrategy is a mock of QueryListStrategy interface.
type MockQueryListStrategy[R any] struct {
	ctrl     *gomock.Controller
	recorder *MockQueryListStrategyMockRecorder[R]
}

// MockQueryListStrategyMockRecorder is the mock recorder for MockQueryListStrategy.
type MockQueryListStrategyMockRecorder[R any] struct {
	mock *MockQueryListStrategy[R]
}

// NewMockQueryListStrategy creates a new mock instance.
func NewMockQueryListStrategy[R any](ctrl *gomock.Controller) *MockQueryListStrategy[R] {
	mock := &MockQueryListStrategy[R]{ctrl: ctrl}
	mock.recorder = &MockQueryListStrategyMockRecorder[R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryListStrategy[R]) EXPECT() *MockQueryListStrategyMockRecorder[R] {
	return m.recorder
}

// QueryList mocks base method.
func (m *MockQueryListStrategy[R]) QueryList(arg0 context.Context, arg1 *builder[R]) ([]*R, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryList", arg0, arg1)
	ret0, _ := ret[0].([]*R)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryList indicates an expected call of QueryList.
func (mr *MockQueryListStrategyMockRecorder[R]) QueryList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryList", reflect.TypeOf((*MockQueryListStrategy[R])(nil).QueryList), arg0, arg1)
}
